{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"JSON YAML Messages for Yii Translate your application using structured catalogs Use a message source that stores translated messages in JSON or YAML files. Unlike traditional message sources, like yii\\i18n\\PhpMessageSource or yii\\i18n\\DbMessageSource , a JSON/YAML message source let you share your translations with your frontend application, and even use nesting. Quick start Install the latest version of JSON YAML Messages for Yii with Composer : composer require cedx/yii2-json-messages For detailed instructions, see the installation guide .","title":"Overview"},{"location":"#json-yaml-messages-for-yii","text":"","title":"JSON &amp; YAML Messages for Yii"},{"location":"#translate-your-application-using-structured-catalogs","text":"Use a message source that stores translated messages in JSON or YAML files. Unlike traditional message sources, like yii\\i18n\\PhpMessageSource or yii\\i18n\\DbMessageSource , a JSON/YAML message source let you share your translations with your frontend application, and even use nesting.","title":"Translate your application using structured catalogs"},{"location":"#quick-start","text":"Install the latest version of JSON YAML Messages for Yii with Composer : composer require cedx/yii2-json-messages For detailed instructions, see the installation guide .","title":"Quick start"},{"location":"installation/","text":"Installation Requirements Before installing JSON YAML Messages for Yii , you need to make sure you have PHP and Composer , the PHP package manager, up and running. Warning JSON YAML Messages for Yii requires PHP = 7.2.0 . You can verify if you're already good to go with the following commands: php --version # PHP 7.2.10-0ubuntu0.18.04.1 (cli) (built: Sep 13 2018 13:45:02) ( NTS ) composer --version # Composer version 1.7.2 2018-08-16 16:57:12 Info If you plan to play with the package sources, you will also need Robo and Material for MkDocs . Installing with Composer package manager 1. Install it From a command prompt, run: composer require cedx/yii2-json-messages 2. Import it Now in your PHP code, you can use: ?php use yii\\i18n\\ { JsonMessageSource , YamlMessageSource };","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#requirements","text":"Before installing JSON YAML Messages for Yii , you need to make sure you have PHP and Composer , the PHP package manager, up and running. Warning JSON YAML Messages for Yii requires PHP = 7.2.0 . You can verify if you're already good to go with the following commands: php --version # PHP 7.2.10-0ubuntu0.18.04.1 (cli) (built: Sep 13 2018 13:45:02) ( NTS ) composer --version # Composer version 1.7.2 2018-08-16 16:57:12 Info If you plan to play with the package sources, you will also need Robo and Material for MkDocs .","title":"Requirements"},{"location":"installation/#installing-with-composer-package-manager","text":"","title":"Installing with Composer package manager"},{"location":"installation/#1-install-it","text":"From a command prompt, run: composer require cedx/yii2-json-messages","title":"1. Install it"},{"location":"installation/#2-import-it","text":"Now in your PHP code, you can use: ?php use yii\\i18n\\ { JsonMessageSource , YamlMessageSource };","title":"2. Import it"},{"location":"usage/","text":"Usage This package provides a set of classes which are message sources that store translated messages in files. They extends from yii\\i18n\\PhpMessageSource class, so their usage is basically the same. Tip See the Yii guide for more information about internationalization and message translation. Using a JSON catalog In your application configuration file, use the following message source: ?php return [ components = [ i18n = [ translations = [ app* = yii\\i18n\\JsonMessageSource ] ] ] ]; Within a JSON file, an object literal of (source, translation) pairs provides the message catalog. For example: { original message 1 : translated message 1 , original message 2 : translated message 2 } Using a YAML catalog In your application configuration file, use the following message source: ?php return [ components = [ i18n = [ translations = [ app* = yii\\i18n\\YamlMessageSource ] ] ] ]; Within a YAML file, an object literal of (source, translation) pairs provides the message catalog. For example: original message 1 : translated message 1 original message 2 : translated message 2 Nested objects It is a common practice to use keys instead of original messages, alongside the enablement of the yii\\i18n\\MessageSource::$forceTranslation property. For example: { foo.bar : translated message for key foo.bar , bar.qux : translated message for key bar.qux } The yii\\i18n\\JsonMessageSource and yii\\i18n\\YamlMessageSource classes understand nested objects. This means that you can have JSON files that look like this: { foo : translated message for key path foo , bar : { qux : translated message for key path bar.qux }, baz : { qux : { quux : translated message for key path baz.qux.quux } } } Or YAML files that look like that: foo : translated message for key path foo bar : qux : translated message for key path bar.qux baz : qux : quux : translated message for key path baz.qux.quux And use dot notation to access a translation: ?php function main () : void { echo \\Yii :: t ( app , baz.qux.quux ); // Prints: translated message for key path baz.qux.quux } To optin for this feature, you must set the $enableNesting property. In the application configuration file: ?php return [ components = [ i18n = [ translations = [ app* = [ class = yii\\i18n\\JsonMessageSource , enableNesting = true ] ] ] ] ]; If you don't want to use the dot notation, you can customize the character(s) used by setting the $nestingSeparator property. For example, to use the slash character (e.g. / ) as property delimiter: ?php return [ components = [ i18n = [ translations = [ app* = [ class = yii\\i18n\\YamlMessageSource , enableNesting = true , nestingSeparator = / ] ] ] ] ]; You can then access a translation by using the customized notation: ?php function main () : void { // Using the slash character. echo \\Yii :: t ( app , foo/bar/baz ); // Using the - string. echo \\Yii :: t ( app , foo- bar- baz ); } Tip This package also provides the yii\\i18n\\ExtendedPhpMessageSource class. This class adds nested objects support to the yii\\i18n\\PhpMessageSource class.","title":"Usage"},{"location":"usage/#usage","text":"This package provides a set of classes which are message sources that store translated messages in files. They extends from yii\\i18n\\PhpMessageSource class, so their usage is basically the same. Tip See the Yii guide for more information about internationalization and message translation.","title":"Usage"},{"location":"usage/#using-a-json-catalog","text":"In your application configuration file, use the following message source: ?php return [ components = [ i18n = [ translations = [ app* = yii\\i18n\\JsonMessageSource ] ] ] ]; Within a JSON file, an object literal of (source, translation) pairs provides the message catalog. For example: { original message 1 : translated message 1 , original message 2 : translated message 2 }","title":"Using a JSON catalog"},{"location":"usage/#using-a-yaml-catalog","text":"In your application configuration file, use the following message source: ?php return [ components = [ i18n = [ translations = [ app* = yii\\i18n\\YamlMessageSource ] ] ] ]; Within a YAML file, an object literal of (source, translation) pairs provides the message catalog. For example: original message 1 : translated message 1 original message 2 : translated message 2","title":"Using a YAML catalog"},{"location":"usage/#nested-objects","text":"It is a common practice to use keys instead of original messages, alongside the enablement of the yii\\i18n\\MessageSource::$forceTranslation property. For example: { foo.bar : translated message for key foo.bar , bar.qux : translated message for key bar.qux } The yii\\i18n\\JsonMessageSource and yii\\i18n\\YamlMessageSource classes understand nested objects. This means that you can have JSON files that look like this: { foo : translated message for key path foo , bar : { qux : translated message for key path bar.qux }, baz : { qux : { quux : translated message for key path baz.qux.quux } } } Or YAML files that look like that: foo : translated message for key path foo bar : qux : translated message for key path bar.qux baz : qux : quux : translated message for key path baz.qux.quux And use dot notation to access a translation: ?php function main () : void { echo \\Yii :: t ( app , baz.qux.quux ); // Prints: translated message for key path baz.qux.quux } To optin for this feature, you must set the $enableNesting property. In the application configuration file: ?php return [ components = [ i18n = [ translations = [ app* = [ class = yii\\i18n\\JsonMessageSource , enableNesting = true ] ] ] ] ]; If you don't want to use the dot notation, you can customize the character(s) used by setting the $nestingSeparator property. For example, to use the slash character (e.g. / ) as property delimiter: ?php return [ components = [ i18n = [ translations = [ app* = [ class = yii\\i18n\\YamlMessageSource , enableNesting = true , nestingSeparator = / ] ] ] ] ]; You can then access a translation by using the customized notation: ?php function main () : void { // Using the slash character. echo \\Yii :: t ( app , foo/bar/baz ); // Using the - string. echo \\Yii :: t ( app , foo- bar- baz ); } Tip This package also provides the yii\\i18n\\ExtendedPhpMessageSource class. This class adds nested objects support to the yii\\i18n\\PhpMessageSource class.","title":"Nested objects"},{"location":"about/changelog/","text":"Changelog Version 5.1.0 Added the FileMessageSource abstract class. Added the ExtendedPhpMessageSource and YamlMessageSource classes. Added an example code. Dropped the dependency on PHPUnit-Expect . Replaced the Phing build system by Robo . Version 5.0.0 Breaking change: raised the required PHP version. Updated the package dependencies. Version 4.1.0 Added a user guide based on MkDocs . Updated the package dependencies. Version 4.0.0 Breaking change: raised the required PHP version. Breaking change: removed the jsonSerialize() and __toString() methods. Breaking change: using PHP 7.1 features, like void functions. Version 3.0.0 Added support for nested JSON objects. Changed licensing for the MIT License . Version 2.4.0 Enabled the strict typing. Replaced phpDocumentor documentation generator by ApiGen . Updated the package dependencies. Version 2.3.0 Ported the unit test assertions from TDD to BDD . Version 2.2.0 Updated the package dependencies. Version 2.1.0 Replaced the Codacy code coverage service by the Coveralls one. Updated the package dependencies. Version 2.0.0 Breaking change: removed the toJSON() method. Removed the final modifier from the jsonSerialize() method. Version 1.1.0 Added the jsonSerialize() and toJSON() methods. Version 1.0.2 Updated the package dependencies. Version 1.0.1 Code optimization. Updated the package dependencies. Version 1.0.0 First stable release. Updated the package dependencies. Version 0.5.2 Replaced Doxygen documentation generator by phpDocumentor . Version 0.5.1 Removed dependency on external PHP Mess Detector and PHPUnit interfaces. Renamed the project according to its Composer package name. Replaced SonarQube code analyzer by Codacy service. Updated the package dependencies. Version 0.5.0 Breaking change: using PHP 7 features, like scalar and return type declarations. Version 0.4.3 Added code coverage. Changed licensing for the Apache License Version 2.0 . Updated the development dependencies. Version 0.4.2 Added a lint task based on PHP Mess Detector code analyzer. Added a test task based on PHPUnit testing framework. Added support for SonarQube code analyzer. Version 0.4.1 Replaced the custom build scripts by Phing . Version 0.4.0 Dropped the development dependencies based on Node.js . Replaced the build system by custom scripts. Replaced the documentation system by Doxygen . Version 0.3.2 Updated the development dependencies. Version 0.3.1 Updated the development dependencies. Version 0.3.0 Breaking change: ported the library API to Yii version 2. Version 0.2.0 Breaking change: ported the library API to namespaces . Lowered the required PHP version. Version 0.1.1 Using Gulp as build system. Version 0.1.0 Initial release.","title":"Changelog"},{"location":"about/changelog/#changelog","text":"","title":"Changelog"},{"location":"about/changelog/#version-510","text":"Added the FileMessageSource abstract class. Added the ExtendedPhpMessageSource and YamlMessageSource classes. Added an example code. Dropped the dependency on PHPUnit-Expect . Replaced the Phing build system by Robo .","title":"Version 5.1.0"},{"location":"about/changelog/#version-500","text":"Breaking change: raised the required PHP version. Updated the package dependencies.","title":"Version 5.0.0"},{"location":"about/changelog/#version-410","text":"Added a user guide based on MkDocs . Updated the package dependencies.","title":"Version 4.1.0"},{"location":"about/changelog/#version-400","text":"Breaking change: raised the required PHP version. Breaking change: removed the jsonSerialize() and __toString() methods. Breaking change: using PHP 7.1 features, like void functions.","title":"Version 4.0.0"},{"location":"about/changelog/#version-300","text":"Added support for nested JSON objects. Changed licensing for the MIT License .","title":"Version 3.0.0"},{"location":"about/changelog/#version-240","text":"Enabled the strict typing. Replaced phpDocumentor documentation generator by ApiGen . Updated the package dependencies.","title":"Version 2.4.0"},{"location":"about/changelog/#version-230","text":"Ported the unit test assertions from TDD to BDD .","title":"Version 2.3.0"},{"location":"about/changelog/#version-220","text":"Updated the package dependencies.","title":"Version 2.2.0"},{"location":"about/changelog/#version-210","text":"Replaced the Codacy code coverage service by the Coveralls one. Updated the package dependencies.","title":"Version 2.1.0"},{"location":"about/changelog/#version-200","text":"Breaking change: removed the toJSON() method. Removed the final modifier from the jsonSerialize() method.","title":"Version 2.0.0"},{"location":"about/changelog/#version-110","text":"Added the jsonSerialize() and toJSON() methods.","title":"Version 1.1.0"},{"location":"about/changelog/#version-102","text":"Updated the package dependencies.","title":"Version 1.0.2"},{"location":"about/changelog/#version-101","text":"Code optimization. Updated the package dependencies.","title":"Version 1.0.1"},{"location":"about/changelog/#version-100","text":"First stable release. Updated the package dependencies.","title":"Version 1.0.0"},{"location":"about/changelog/#version-052","text":"Replaced Doxygen documentation generator by phpDocumentor .","title":"Version 0.5.2"},{"location":"about/changelog/#version-051","text":"Removed dependency on external PHP Mess Detector and PHPUnit interfaces. Renamed the project according to its Composer package name. Replaced SonarQube code analyzer by Codacy service. Updated the package dependencies.","title":"Version 0.5.1"},{"location":"about/changelog/#version-050","text":"Breaking change: using PHP 7 features, like scalar and return type declarations.","title":"Version 0.5.0"},{"location":"about/changelog/#version-043","text":"Added code coverage. Changed licensing for the Apache License Version 2.0 . Updated the development dependencies.","title":"Version 0.4.3"},{"location":"about/changelog/#version-042","text":"Added a lint task based on PHP Mess Detector code analyzer. Added a test task based on PHPUnit testing framework. Added support for SonarQube code analyzer.","title":"Version 0.4.2"},{"location":"about/changelog/#version-041","text":"Replaced the custom build scripts by Phing .","title":"Version 0.4.1"},{"location":"about/changelog/#version-040","text":"Dropped the development dependencies based on Node.js . Replaced the build system by custom scripts. Replaced the documentation system by Doxygen .","title":"Version 0.4.0"},{"location":"about/changelog/#version-032","text":"Updated the development dependencies.","title":"Version 0.3.2"},{"location":"about/changelog/#version-031","text":"Updated the development dependencies.","title":"Version 0.3.1"},{"location":"about/changelog/#version-030","text":"Breaking change: ported the library API to Yii version 2.","title":"Version 0.3.0"},{"location":"about/changelog/#version-020","text":"Breaking change: ported the library API to namespaces . Lowered the required PHP version.","title":"Version 0.2.0"},{"location":"about/changelog/#version-011","text":"Using Gulp as build system.","title":"Version 0.1.1"},{"location":"about/changelog/#version-010","text":"Initial release.","title":"Version 0.1.0"},{"location":"about/license/","text":"MIT License Copyright 2014 - 2019 C\u00e9dric Belin Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"about/license/#mit-license","text":"Copyright 2014 - 2019 C\u00e9dric Belin Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"MIT License"},{"location":"about/see_also/","text":"See also Development API reference Packagist package Submit an issue Testing Continuous integration Code coverage","title":"See also"},{"location":"about/see_also/#see-also","text":"","title":"See also"},{"location":"about/see_also/#development","text":"API reference Packagist package Submit an issue","title":"Development"},{"location":"about/see_also/#testing","text":"Continuous integration Code coverage","title":"Testing"}]}